node('maven') {
   // define commands
   def mvnCmd = "mvn -s cicd-settings.xml"

   stage ('Build') {
     git branch: 'master', url: 'http://gogs-cicd.apps.emeabootcamp.openshift.opentlc.com/gogs/appdev-foundations-kitchensink.git'
     sh "${mvnCmd} clean install -DskipTests=true"
   }

   stage ('Test and Analysis') {
     parallel (
         'Test': {
             sh "${mvnCmd} test"
             step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
         },
         'Static Analysis': {
            // sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
         }
     )
   }

   stage ('Push to Nexus') {
    sh "${mvnCmd} deploy -DskipTests=true"
   }

   stage ('Deploy DEV') {
     sh "rm -rf oc-build && mkdir -p oc-build/deployments"
     //sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
     sh "oc project dev"
     // clean up. keep the image stream
     sh "oc delete bc,dc,svc,route -l app=tasks -n dev"
     // create build. override the exit code since it complains about exising imagestream
     sh "oc new-build --name=tasks --image-stream=jboss-eap70-openshift --binary=true --labels=app=tasks -n dev || true"
     // build image
     sh "oc start-build tasks --from-dir=oc-build --wait=true -n dev"
     // deploy image
     sh "oc new-app tasks:latest -n dev"
     sh "oc expose svc/tasks -n dev"
   }
// deploy to Integration
stage ('Deploy Integration') {
     def v = version()
     // tag for stage
     
     sh "oc login -u user45 -p r3dh4t1!"
     // user logged-in
     sh "oc new-project int --display-name="Tasks-int""
     // new project created
    //sh "oc policy add-role-to-user edit system:serviceaccount:cicd:jenkins -n int"
     sh "oc tag dev/tasks:latest int/tasks:${v}"
     //tag done
     sh "oc project int" 
     // inside the project int
     sh "oc delete bc,dc,svc,route -l app=tasks -n int"
     // clean up. keep the imagestream

     sh "oc new-app tasks:${v} -n int"
     sh "oc expose svc/tasks -n int"
          // deploy stage image

     //user input
     timeout(time:5, unit:'MINUTES') {
        input message: "Dismentling to Integration box?", ok: "Destroy Integration"
     }
     sh "oc delete project int"
   }
   
   stage ('Deploy STAGE') {
     def v = version()
     // tag for stage
     sh "oc tag dev/tasks:latest stage/tasks:${v}"
     sh "oc project stage"
     // clean up. keep the imagestream
     sh "oc delete bc,dc,svc,route -l app=tasks -n stage"
     // deploy stage image
     sh "oc new-app tasks:${v} -n stage"
     sh "oc expose svc/tasks -n stage"
   }
     // Deploy Production
     stage ('Deploy Production') {
     timeout(time:5, unit:'MINUTES') {
        input message: "Promote to Prod?", ok: "Go-Live"
     }
          def v = version()


     // tag for stage
     sh "oc tag stage/tasks:latest prod/tasks:${v}"
     sh "oc project prod"
     // clean up. keep the imagestream
     sh "oc delete bc,dc,svc,route -l app=tasks -n prod"
     // deploy stage image
     sh "oc new-app tasks:${v} -n prod"
     sh "oc expose svc/tasks -n prod"
     //**********Deployment completed********
   }
}

def version() {
  def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
